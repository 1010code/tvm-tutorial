def @main(%float_input: Tensor[(1, 4), float32] /* ty=Tensor[(1, 4), float32] span=/_operators.0/Cast.float_input:0:0 */) -> (Tensor[(1), int64], Tensor[(1, 3), float32]) {
  %0 = cast(%float_input, dtype="float64") /* ty=Tensor[(1, 4), float64] span=/_operators.0/Cast:0:0 */;
  %1 = subtract(%0, meta[relay.Constant][1] /* ty=Tensor[(4), float64] span=/_operators.0/Sub._operators.0.offset:0:0 */) /* ty=Tensor[(1, 4), float64] span=/_operators.0/Sub:0:0 */;
  %2 = multiply(%1, meta[relay.Constant][2] /* ty=Tensor[(4), float64] span=/_operators.0/Mul._operators.0.scale:0:0 */) /* ty=Tensor[(1, 4), float64] span=/_operators.0/Mul:0:0 */;
  %3 = cast(%2, dtype="float32") /* ty=Tensor[(1, 4), float32] span=/_operators.0/Cast_1:0:0 */;
  %4 = cast(%3, dtype="float32") /* ty=Tensor[(1, 4), float32] span=/_operators.1/Cast:0:0 */;
  %5 = nn.dense(%4, meta[relay.Constant][3] /* ty=Tensor[(3, 4), float32] span=/_operators.1/Gemm:0:0 */, units=3) /* ty=Tensor[(1, 3), float32] span=/_operators.1/Gemm:0:0 */;
  %6 = add(%5, meta[relay.Constant][4] /* ty=Tensor[(3), float32] span=/_operators.1/Gemm._operators.1.intercepts:0:0 */) /* ty=Tensor[(1, 3), float32] span=/_operators.1/Gemm:0:0 */;
  %7 = argmax(%6, axis=[1]) /* ty=Tensor[(1), int32] span=/_operators.1/ArgMax:0:0 */;
  %8 = cast(%7, dtype="int64") /* ty=Tensor[(1), int64] span=/_operators.1/ArgMax:0:0 */;
  %9 = less(%8, 0i64 /* ty=int64 span=/_operators.1/Gather:0:0 */) /* ty=Tensor[(1), bool] span=/_operators.1/Gather:0:0 */;
  %10 = add(%8, 3i64 /* ty=int64 span=/_operators.1/Gather:0:0 */) /* ty=Tensor[(1), int64] span=/_operators.1/Gather:0:0 */;
  %11 = where(%9, %10, %8) /* ty=Tensor[(1), int64] span=/_operators.1/Gather:0:0 */;
  %12 = take(meta[relay.Constant][0] /* ty=Tensor[(3), int32] span=/_operators.1/Gather._operators.1.classes:0:0 */, %11, axis=0) /* ty=Tensor[(1), int32] span=/_operators.1/Gather:0:0 */;
  %13 = nn.softmax(%6, axis=1) /* ty=Tensor[(1, 3), float32] span=/_operators.1/Softmax:0:0 */;
  %14 = multiply(%13, %13) /* ty=Tensor[(1, 3), float32] span=/_operators.2/Abs_mul:0:0 */;
  %15 = sqrt(%14) /* ty=Tensor[(1, 3), float32] span=/_operators.2/Abs_sqrt:0:0 */;
  %16 = sum(%15, axis=[1], keepdims=True) /* ty=Tensor[(1, 1), float32] span=/_operators.2/ReduceSum:0:0 */;
  %17 = cast(%12, dtype="int64") /* ty=Tensor[(1), int64] span=/_operators.3/Cast:0:0 */;
  %18 = divide(%13, %16) /* ty=Tensor[(1, 3), float32] span=/_operators.2/Div:0:0 */;
  (%17, %18) /* ty=(Tensor[(1), int64], Tensor[(1, 3), float32]) */
}

